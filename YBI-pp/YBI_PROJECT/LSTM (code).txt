import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
data = pd.read_csv('dataset1.csv')
data = data.loc[:, ~data.columns.str.contains('^Unnamed')]
x = data.drop(columns=['Target ']).values
y = data['Target '].values
scaler_x = MinMaxScaler()
scaler_y = MinMaxScaler()
x = scaler_x.fit_transform(x)
y = scaler_y.fit_transform(y.reshape(-1, 1))
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
x_train = x_train.reshape((x_train.shape[0], 1, x_train.shape[1]))
x_test = x_test.reshape((x_test.shape[0], 1, x_test.shape[1]))
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(x_train.shape[1], x_train.shape[2])))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
history = model.fit(x_train, y_train, epochs=200, batch_size=32, validation_data=(x_test, y_test), verbose=2, shuffle=False)
y_pred = model.predict(x_test)
y_pred = scaler_y.inverse_transform(y_pred)
y_test = scaler_y.inverse_transform(y_test)
for i in range(len(y_pred)):
    print(y_pred[i], y_test[i])
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(" ")
print("RESULT")
print("r2 : ", r2)
print("mse : ", mse)
print(" ")
plt.figure(figsize=(10,5))
plt.bar(range(len(y_pred)), y_pred.flatten(), alpha=0.5)
plt.bar(range(len(y_test)), y_test.flatten(), alpha=0.5)
plt.legend(['predicted', 'actual'])
plt.show()
plt.scatter(range(len(y_pred)), y_pred, alpha=0.5)
plt.scatter(range(len(y_test)), y_test, alpha=0.5)
plt.legend(['predicted', 'actual'])
plt.show()